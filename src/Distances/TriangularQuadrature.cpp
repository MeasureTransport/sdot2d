#include "SDOT/Distances/TriangularQuadrature.h"
#include "SDOT/Assert.h"

using namespace sdot::distances;


std::pair<Eigen::Matrix2Xd, Eigen::VectorXd> TriangularQuadrature::Get(unsigned int degree)
{
  SDOT_ASSERT(degree>0);
  SDOT_ASSERT(degree<8);

  switch(degree) {
   case 1 : return Centroid();
   case 2 : return Strang1();
   case 3 : return Strang3();
   case 4 : return Strang5();
   case 5 : return Strang7();
   case 6 : return Strang9();
   case 7 : return Strang10();
  }
  return std::make_pair(Eigen::Matrix2Xd(), Eigen::VectorXd());
}

std::pair<Eigen::Matrix2Xd, Eigen::VectorXd> TriangularQuadrature::Centroid()
{
  Eigen::Matrix2Xd pts(2,1);
  pts << 0.33333333333333333333,
         0.33333333333333333333;

  Eigen::VectorXd wts(1);
  wts << 1.00000000000000000000;
  wts *= 0.5;

  return std::make_pair(pts,wts);
}


std::pair<Eigen::Matrix2Xd, Eigen::VectorXd> TriangularQuadrature::Strang1()
{
  Eigen::Matrix2Xd pts(2,3);
  pts << 0.66666666666666666667, 0.16666666666666666667, 0.16666666666666666667,
         0.16666666666666666667, 0.66666666666666666667, 0.16666666666666666667;

  Eigen::VectorXd wts(3);
  wts <<   0.33333333333333333333, 0.33333333333333333333, 0.33333333333333333333;
  wts *= 0.5;

  return std::make_pair(pts,wts);
}

std::pair<Eigen::Matrix2Xd, Eigen::VectorXd> TriangularQuadrature::Strang3()
{
  Eigen::Matrix2Xd pts(2,4);
  pts << 0.33333333333333333333, 0.60000000000000000000, 0.20000000000000000000, 0.20000000000000000000,
         0.33333333333333333333, 0.20000000000000000000, 0.60000000000000000000, 0.20000000000000000000;

  Eigen::VectorXd wts(4);
  wts <<  -0.56250000000000000000, 0.52083333333333333333, 0.52083333333333333333, 0.52083333333333333333;
  wts *= 0.5;

  return std::make_pair(pts,wts);
}


std::pair<Eigen::Matrix2Xd, Eigen::VectorXd> TriangularQuadrature::Strang5()
{
  Eigen::Matrix2Xd pts(2,6);
  pts << 0.816847572980459, 0.091576213509771, 0.091576213509771, 0.108103018168070, 0.445948490915965, 0.445948490915965,
         0.091576213509771, 0.816847572980459, 0.091576213509771, 0.445948490915965, 0.108103018168070, 0.445948490915965;

  Eigen::VectorXd wts(6);
  wts << 0.109951743655322, 0.109951743655322, 0.109951743655322, 0.223381589678011, 0.223381589678011, 0.223381589678011;
  wts *= 0.5;

  return std::make_pair(pts,wts);

}

std::pair<Eigen::Matrix2Xd, Eigen::VectorXd> TriangularQuadrature::Strang7()
{
  Eigen::Matrix2Xd pts(2,7);
  pts << 0.33333333333333333, 0.79742698535308720, 0.10128650732345633, 0.10128650732345633, 0.05971587178976981, 0.47014206410511505, 0.47014206410511505,
         0.33333333333333333, 0.10128650732345633, 0.79742698535308720, 0.10128650732345633, 0.47014206410511505, 0.05971587178976981, 0.47014206410511505;

  Eigen::VectorXd wts(7);
  wts <<   0.22500000000000000, 0.12593918054482717, 0.12593918054482717, 0.12593918054482717, 0.13239415278850616, 0.13239415278850616, 0.13239415278850616;
  wts *= 0.5;

  return std::make_pair(pts, wts);
}


std::pair<Eigen::Matrix2Xd, Eigen::VectorXd> TriangularQuadrature::Strang9()
{
  Eigen::Matrix2Xd pts(2,9);
  pts  << 0.124949503233232, 0.437525248383384, 0.437525248383384, 0.797112651860071, 0.797112651860071, 0.165409927389841, 0.165409927389841, 0.037477420750088, 0.037477420750088,
          0.437525248383384, 0.124949503233232, 0.437525248383384, 0.165409927389841, 0.037477420750088, 0.797112651860071, 0.037477420750088, 0.797112651860071, 0.165409927389841;

  Eigen::VectorXd wts(9);
  wts << 0.205950504760887, 0.205950504760887, 0.205950504760887, 0.063691414286223, 0.063691414286223, 0.063691414286223, 0.063691414286223, 0.063691414286223, 0.063691414286223;
  wts *= 0.5;

  return std::make_pair(pts, wts);
}


std::pair<Eigen::Matrix2Xd, Eigen::VectorXd> TriangularQuadrature::Strang10()
{
  Eigen::Matrix2Xd pts(2,13);
  pts << 0.333333333333333, 0.479308067841923, 0.260345966079038, 0.260345966079038, 0.869739794195568, 0.065130102902216, 0.065130102902216, 0.638444188569809, 0.638444188569809, 0.312865496004875, 0.312865496004875, 0.048690315425316, 0.048690315425316,
         0.333333333333333, 0.260345966079038, 0.479308067841923, 0.260345966079038, 0.065130102902216, 0.869739794195568, 0.065130102902216, 0.312865496004875, 0.048690315425316, 0.638444188569809, 0.048690315425316, 0.638444188569809, 0.312865496004875;

  Eigen::VectorXd wts(13);
  wts <<  -0.149570044467670, 0.175615257433204, 0.175615257433204, 0.175615257433204, 0.053347235608839, 0.053347235608839, 0.053347235608839, 0.077113760890257, 0.077113760890257, 0.077113760890257, 0.077113760890257, 0.077113760890257, 0.077113760890257;
  wts *= 0.5;
  
  return std::make_pair(pts, wts);
}
